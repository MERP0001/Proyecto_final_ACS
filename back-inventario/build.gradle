plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.graalvm.buildtools.native' version '0.10.6'
    id 'jacoco'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    implementation 'org.springframework.data:spring-data-envers'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate6'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    
    // Cucumber dependencies
    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
    testImplementation 'io.cucumber:cucumber-spring:7.15.0'
    testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
    
    // Playwright dependencies
    testImplementation 'com.microsoft.playwright:playwright:1.40.0'
    testImplementation 'org.testng:testng:7.8.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    //Prometheus dependencies
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/*Application*',
                '**/config/**',
                '**/dto/**',
                '**/entity/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

// ========================================================================
// TAREAS PERSONALIZADAS PARA QAS (Quality Assurance Software)
// ========================================================================

// Tarea para ejecutar pruebas de Cucumber
task cucumber() {
    dependsOn assemble, testClasses
    group = 'QAS'
    description = 'Ejecuta todas las pruebas de aceptaciÃ³n con Cucumber'
    
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                '--plugin', 'pretty',
                '--plugin', 'html:target/cucumber-reports/Cucumber.html',
                '--plugin', 'json:target/cucumber-reports/Cucumber.json',
                '--plugin', 'junit:target/cucumber-reports/Cucumber.xml',
                '--glue', 'org.example.proyectofinal.cucumber',
                '--tags', '@productos or @categorias or @autenticacion',
                'src/test/resources/features'
            ]
        }
    }
}

// Tarea para ejecutar solo pruebas de regresiÃ³n
task regressionTests() {
    dependsOn assemble, testClasses
    group = 'QAS'
    description = 'Ejecuta suite de pruebas de regresiÃ³n crÃ­ticas'
    
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                '--plugin', 'pretty',
                '--plugin', 'html:target/regression-reports/cucumber.html',
                '--plugin', 'json:target/regression-reports/cucumber.json',
                '--glue', 'org.example.proyectofinal.cucumber',
                '--tags', '@regresion',
                'src/test/resources/features'
            ]
        }
    }
}

// Tarea para generar reporte consolidado de QAS
task qasReport() {
    dependsOn test, cucumber, jacocoTestReport
    group = 'QAS'
    description = 'Genera reporte consolidado de todas las pruebas QAS'
    
    doLast {
        def reportDir = file("$buildDir/reports/qas")
        reportDir.mkdirs()
        
        def htmlContent = """
<!DOCTYPE html>
<html>
<head>
    <title>Reporte QAS Consolidado - ${new Date()}</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .metric { display: inline-block; margin: 10px; padding: 15px; background: #f9f9f9; border-radius: 8px; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸ“Š Reporte QAS Consolidado</h1>
        <p><strong>Proyecto:</strong> Sistema de GestiÃ³n de Inventarios</p>
        <p><strong>Fecha:</strong> ${new Date()}</p>
    </div>
    
    <div class="section">
        <h2>ðŸŽ¯ MÃ©tricas de Calidad</h2>
        <div class="metric">
            <h3>Cobertura de CÃ³digo</h3>
            <p>Objetivo: â‰¥ 80%</p>
            <p><a href="../jacoco/test/html/index.html">Ver Reporte JaCoCo</a></p>
        </div>
        
        <div class="metric">
            <h3>Pruebas Unitarias</h3>
            <p>JUnit + Spring Boot Test</p>
            <p><a href="../tests/test/index.html">Ver Reporte JUnit</a></p>
        </div>
        
        <div class="metric">
            <h3>Pruebas de AceptaciÃ³n</h3>
            <p>Cucumber BDD</p>
            <p><a href="../../target/cucumber-reports/Cucumber.html">Ver Reporte Cucumber</a></p>
        </div>
    </div>
    
    <div class="section">
        <h2>ðŸ”„ Tipos de Pruebas Implementadas</h2>
        <table>
            <tr><th>Tipo</th><th>Herramienta</th><th>Cobertura</th><th>Estado</th></tr>
            <tr><td>Unitarias</td><td>JUnit 5</td><td>Servicios, Repositorios</td><td>âœ… Implementado</td></tr>
            <tr><td>IntegraciÃ³n</td><td>SpringBootTest</td><td>Controllers, API</td><td>âœ… Implementado</td></tr>
            <tr><td>AceptaciÃ³n</td><td>Cucumber</td><td>Escenarios de negocio</td><td>âœ… Implementado</td></tr>
            <tr><td>E2E Frontend</td><td>Playwright</td><td>Flujos de usuario</td><td>âœ… Implementado</td></tr>
            <tr><td>EstrÃ©s</td><td>JMeter</td><td>Rendimiento y carga</td><td>âœ… Implementado</td></tr>
            <tr><td>RegresiÃ³n</td><td>Suite automatizada</td><td>Funcionalidades crÃ­ticas</td><td>âœ… Implementado</td></tr>
        </table>
    </div>
    
    <div class="section">
        <h2>ðŸš€ Comandos de EjecuciÃ³n</h2>
        <p><strong>Todas las pruebas:</strong> <code>./gradlew test</code></p>
        <p><strong>Pruebas de aceptaciÃ³n:</strong> <code>./gradlew cucumber</code></p>
        <p><strong>Pruebas de regresiÃ³n:</strong> <code>./gradlew regressionTests</code></p>
        <p><strong>Reporte de cobertura:</strong> <code>./gradlew jacocoTestReport</code></p>
        <p><strong>Reporte QAS completo:</strong> <code>./gradlew qasReport</code></p>
    </div>
</body>
</html>
        """
        
        file("$reportDir/index.html").text = htmlContent
        println "âœ… Reporte QAS generado en: $reportDir/index.html"
    }
}

// Tarea para ejecutar suite completa de QAS
task qasFullSuite() {
    dependsOn clean, test, cucumber, regressionTests, jacocoTestReport, qasReport
    group = 'QAS'
    description = 'Ejecuta la suite completa de pruebas QAS'
    
    doLast {
        println ""
        println "ðŸŽ‰ ====================================="
        println "ðŸŽ‰ SUITE QAS COMPLETADA EXITOSAMENTE"
        println "ðŸŽ‰ ====================================="
        println "ðŸ“Š Reportes disponibles en:"
        println "   - JUnit: build/reports/tests/test/index.html"
        println "   - Cucumber: target/cucumber-reports/Cucumber.html"
        println "   - JaCoCo: build/reports/jacoco/test/html/index.html"
        println "   - QAS Consolidado: build/reports/qas/index.html"
        println ""
    }
}
